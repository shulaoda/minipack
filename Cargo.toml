[workspace]
members  = ["./crates/*"]
resolver = "2"

[workspace.package]
edition    = "2021"
homepage   = "https://github.com/shulaoda/minipack"
license    = "MIT"
repository = "https://github.com/shulaoda/minipack"

[profile.release-debug]
debug    = true
inherits = "release"

[workspace.lints.clippy]
dbg_macro    = "deny"
print_stdout = "deny"

# I like the explicitness of this rule as it removes confusion around `clone`.
# This increases readability, avoids `clone` mindlessly and heap allocating on accident.
clone_on_ref_ptr                = "deny"
empty_drop                      = "deny"
exit                            = "deny"
filetype_is_file                = "deny"
get_unwrap                      = "deny"
rc_buffer                       = "deny"
rc_mutex                        = "deny"
rest_pat_in_fully_bound_structs = "deny"
unnecessary_safety_comment      = "deny"

# --- pedantic #https://doc.rust-lang.org/clippy/usage.html#clippypedantic
# To write the best rust code, pedantic group is enabled by default.
pedantic = { level = "deny", priority = -1 }

# Wizards, naming is too hard.
module_inception        = "allow"
module_name_repetitions = "allow"
similar_names           = "allow"

# Forwarding `Result` is a common pattern, this rule is too pedantic.
missing_errors_doc = "allow"

# #[must_use] is creating too much noise for this codebase, it does not add much value except nagging
# the programmer to add a #[must_use] after clippy has been run.
# Having #[must_use] everywhere also hinders readability.
must_use_candidate = "allow"

doc_markdown         = "allow"
missing_const_for_fn = "allow"
missing_panics_doc   = "allow"
needless_for_each    = "allow"
new_without_default  = "allow"

# Order doesn't really matter https://rust-lang.github.io/rust-clippy/master/index.html#/inconsistent_struct_constructor
inconsistent_struct_constructor = "allow"

# Single match is equally readable as if/else. https://rust-lang.github.io/rust-clippy/master/index.html#/single_match
single_match      = "allow"
single_match_else = "allow"

[workspace.dependencies]
minipack           = { version = "0.1.0", path = "./crates/minipack" }
minipack_common    = { version = "0.1.0", path = "./crates/minipack_common" }
minipack_fs        = { version = "0.1.0", path = "./crates/minipack_fs" }
minipack_plugin    = { version = "0.1.0", path = "./crates/minipack_plugin" }
minipack_resolver  = { version = "0.1.0", path = "./crates/minipack_resolver" }
minipack_sourcemap = { version = "0.1.0", path = "./crates/minipack_sourcemap" }
minipack_utils     = { version = "0.1.0", path = "./crates/minipack_utils" }

anyhow     = { version = "1.0.86" }
arcstr     = { version = "1.2.0" }
dashmap    = { version = "6.0.0" }
dunce      = { version = "1.0.4" }                                    # Normalize Windows paths to the most compatible format, avoiding UNC where possible
fast-glob  = { version = "0.4.0" }
itertools  = { version = "0.13.0" }
memchr     = { version = "2.7.2" }
rayon      = { version = "1.10.0" }
rustc-hash = { version = "2.0.0" }
schemars   = { version = "0.8.21" }
serde      = { version = "1.0.203", features = ["derive"] }
serde_json = { version = "1.0.117" }
simdutf8   = { version = "0.1.5" }
sugar_path = { version = "1.2.0", features = ["cached_current_dir"] }
tokio      = { version = "1.38.0", default-features = false }
vfs        = { version = "0.12.0" }

# oxc crates share the same version
oxc          = { version = "0.38.0", features = ["sourcemap_concurrent", "transformer", "minifier", "semantic", "codegen"] }
oxc_index    = { version = "1.0.0", features = ["rayon"] }
oxc_resolver = { version = "2.1.1" }

[profile.release]
codegen-units = 1
debug         = false     # Set to `true` for debug information
lto           = "fat"
opt-level     = 3
strip         = "symbols" # Set to `false` for debug information
